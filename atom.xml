<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ben Kiefer]]></title>
  <link href="http://benkiefer.github.com/atom.xml" rel="self"/>
  <link href="http://benkiefer.github.com/"/>
  <updated>2013-05-31T15:00:24+01:00</updated>
  <id>http://benkiefer.github.com/</id>
  <author>
    <name><![CDATA[Ben Kiefer]]></name>
    <email><![CDATA[ben.a.kiefer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rapid Web Development with Intellij and Tomcat]]></title>
    <link href="http://benkiefer.github.com/blog/2013/05/31/rapid-web-development-with-intellij-and-tomcat/"/>
    <updated>2013-05-31T02:31:00+01:00</updated>
    <id>http://benkiefer.github.com/blog/2013/05/31/rapid-web-development-with-intellij-and-tomcat</id>
    <content type="html"><![CDATA[<p>At a previous position, I was a big fan of using the Maven Jetty Plugin to develop web apps, particularly when I was working on JSPs that needed some tweaking for different browsers. The main drawback to this approach was that using the plugin for multiple applications was cumbersome and the documentation (at the time) wasn&#8217;t that great.</p>

<p>For the last few months, I&#8217;ve been doing all of my development through Intellij and Tomcat using a Run/Debug configuration for the app, and I didn&#8217;t hit a snag, until yesterday.</p>

<p>One of the big perks of using the Run/Debug configuration is the availability of the &#8220;Reload classes and resources&#8221; function when you make a change. Selecting this option gets you near-Jetty speed when you want to make changes to classes or JSPs and see those changes reflected immediately. There are a few caviats though. You will still need to restart the container if you:</p>

<ul>
<li>change a method signature</li>
<li>add a class</li>
<li>rename a class</li>
<li>change your Spring context</li>
</ul>


<p>However, if you are changing the inner workings of a method or altering a JSP, a class/resource reload will reflect your change almost instantly.</p>

<p>The important gotcha that I found today, is that this option is only available if all the applications running your container are running exploded, which isn&#8217;t a big deal if you only run one app, but when you run 7 it can be an issue. If any of your apps aren&#8217;t exploded, you will see a different option, &#8220;Hot Swap&#8221;, which, from what I can tell, is about the same as a complete restart from a performance perspective.</p>

<p>I made the mistake of selecting one of my wars, rather than the exploded version of the war, and got bit until I double checked my app configuration. Hope this saves you some pain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerMockito: Constructor Mocking]]></title>
    <link href="http://benkiefer.github.com/blog/2013/04/23/powermockito-constructor-mocking/"/>
    <updated>2013-04-23T18:17:00+01:00</updated>
    <id>http://benkiefer.github.com/blog/2013/04/23/powermockito-constructor-mocking</id>
    <content type="html"><![CDATA[<p>Mockito provides mechanisms for mocking most of the stuff you need, but remains mysteriously silent on constructor mocking. &#8220;Newing up&#8221; an object when you are mocking in your unit tests is a pain, and I often found myself writing tiny factories to isolate where I was using a constructor.</p>

<p>For example, to test the following code&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Helper {
</span><span class='line'> 
</span><span class='line'>  public void doSomething(String arg){
</span><span class='line'>      new Something(arg).doSomething();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>You might end up writing something like this to make it more testable&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Helper {
</span><span class='line'>    
</span><span class='line'>  private SomethingFactory somethingFactory;
</span><span class='line'>        
</span><span class='line'>  public void doSomething(String arg) {
</span><span class='line'>      Something something = somethingFactory().build(arg);
</span><span class='line'>      something.doit();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public void setSomethingFactory(SomethingFactory somethingFactory) {
</span><span class='line'>      this.somethingFactory = somethingFactory;
</span><span class='line'>  }
</span><span class='line'>   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now you can inject a mock SomethingFactory in your test, and all the real SomethingFactory does is create your object with the appropriate arg and return it.</p>

<p>PowerMockito offers an enhancement to the Mockito API that let&#8217;s you sidestep this problem with its &#8220;whenNew&#8221; method, but their documentation is lacking.</p>

<p>To use, &#8220;whenNew&#8221;, you will need to supplement your typical Mockito test with a few enhancements.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RunWith(PowerMockRunner.class)
</span><span class='line'>@PrepareForTest(Helper.class)
</span><span class='line'>public class HelperTest {
</span><span class='line'>  @Mock
</span><span class='line'>  private Something mockSomething;
</span><span class='line'>      
</span><span class='line'>  @InjectMocks
</span><span class='line'>  private Helper helper;
</span><span class='line'>      
</span><span class='line'>  @Test
</span><span class='line'>  public void doSomething() throws Exception {
</span><span class='line'>      String argument = "arg";
</span><span class='line'>          
</span><span class='line'>      PowerMockito.whenNew(Something.class).withArguments(argument).thenReturn(mockSomething);
</span><span class='line'>          
</span><span class='line'>      helper.doSomething(argument);
</span><span class='line'>          
</span><span class='line'>      verify(mockSomething).doIt();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The important changes over a typical Mockito test are:</p>

<ul>
<li>The use of the PowerMockRunner in our JUnit @RunWith annotation</li>
<li>The use of the @PrepareForTest method where we specify the name of the class we are testing (Helper.class in this case).</li>
<li>The &#8220;throws Exception&#8221; on our method signature caused by the usage of &#8220;whenNew&#8221;</li>
<li>The static invocation of the &#8220;whenNew&#8221; method, and our passing in the &#8220;argument&#8221; parameter&#8221;.</li>
</ul>


<p>With these changes, you can roll back to the previous code, getting rid of your unnecessary factory and getting rid of some of the clutter from our Helper java class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now I am the master...]]></title>
    <link href="http://benkiefer.github.com/blog/2013/04/15/now-i-am-the-master-dot-dot-dot/"/>
    <updated>2013-04-15T18:21:00+01:00</updated>
    <id>http://benkiefer.github.com/blog/2013/04/15/now-i-am-the-master-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><em>I guess [Apprenticeship] basically means having the attitude that there&#8217;s always a better/smarter/faster way to do what you just did and what you&#8217;re currently doing. Apprenticeship is the state/process of evolving and looking for better ways and finding people, companies and situations that force you to learn those better/smarter/faster ways.</em> - Marten Gustafson</p>

<p>I stumbled upon <a href="http://ofps.oreilly.com/titles/9780596518387/introduction.html">Apprenticeship Patterns</a>, by Hoover and Oshineye the other day, and it hit home.</p>

<p>The authors propose that developers can benefit from a psuedo-medieval pattern of master/journeyman/apprentice relationships, regardless of their role in the relationships. I say &#8220;psuedo-medieval&#8221; because their pattern ignores the mandatory terms and authority structures of the medieval world, focusing instead on the more important aspect of knowledge exchange.</p>

<!--more-->


<p>For example:</p>

<ul>
<li>Apprentices benefit from having an &#8220;Expert within Earshot&#8221; who can help steer them to the answer faster than blind googling.</li>
<li>Journeymen are able to refine their craft by sharing their skills with apprentices while still picking up new skills from their masters.</li>
<li>Masters are challenged to get better by working with lower-level laborers who are hungry to get better at their craft.</li>
</ul>


<p>This resonated heavily with me, mainly because I was able to work with real-life masters while I was getting started in programming. They were able to keep me from doing stupid things by showing me the right way first, and giving me the opportunity to learn why that was the right way through conversation and examples.</p>

<p>I&#8217;m not finished with the book yet, but I like where it&#8217;s headed, and the agile/pair-programming fan in me hopes that the authors will spend some time talking about the effect that pairing in particular can have in this type of setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Python]]></title>
    <link href="http://benkiefer.github.com/blog/2013/03/25/thinking-about-python/"/>
    <updated>2013-03-25T20:41:00+01:00</updated>
    <id>http://benkiefer.github.com/blog/2013/03/25/thinking-about-python</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I cracked open <a href="http://shop.oreilly.com/product/0636920025696.do">Think Python</a>, and so far it&#8217;s been a fun ride.</p>

<p>The interactive nature of the book has helped reinforce the various language quirks for me, and while the language so far may not be that much of a challenge (due in part to its similarities with Groovy/Ruby), the algorythms in each chapter have kept me going. I&#8217;m even considering trying to show my daughter TurtleWorld.</p>

<p>Oreilly&#8217;s Head First books come close in terms of readability, but even after putting away three or four so far, I&#8217;d still say that Think Python&#8217;s got the edge.</p>

<p>If you&#8217;re new to programming, this is a great place to start, particularly if you can snag the e-book during a half-off sale.</p>
]]></content>
  </entry>
  
</feed>
