<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apprenticeship | Ben Kiefer]]></title>
  <link href="http://benkiefer.github.com/blog/categories/apprenticeship/atom.xml" rel="self"/>
  <link href="http://benkiefer.github.com/"/>
  <updated>2013-04-24T02:53:09+01:00</updated>
  <id>http://benkiefer.github.com/</id>
  <author>
    <name><![CDATA[Ben Kiefer]]></name>
    <email><![CDATA[ben.a.kiefer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Now I am the master...]]></title>
    <link href="http://benkiefer.github.com/blog/2013/04/15/now-i-am-the-master-dot-dot-dot/"/>
    <updated>2013-04-15T18:21:00+01:00</updated>
    <id>http://benkiefer.github.com/blog/2013/04/15/now-i-am-the-master-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><em>I guess [Apprenticeship] basically means having the attitude that there's always a better/smarter/faster way to do what you just did and what you're currently doing. Apprenticeship is the state/process of evolving and looking for better ways and finding people, companies and situations that force you to learn those better/smarter/faster ways.</em> - Marten Gustafson</p>

<p>I stumbled upon <a href="http://ofps.oreilly.com/titles/9780596518387/introduction.html">Apprenticeship Patterns</a>, by Hoover and Oshineye the other day, and it hit home.</p>

<p>The authors propose that developers can benefit from a psuedo-medieval pattern of master/journeyman/apprentice relationships, regardless of their role in the relationships. I say "psuedo-medieval" because their pattern ignores the mandatory terms and authority structures of the medieval world, focusing instead on the more important aspect of knowledge exchange.</p>

<!--more-->


<p>For example:</p>

<ul>
<li>Apprentices benefit from having an "Expert within Earshot" who can help steer them to the answer faster than blind googling.</li>
<li>Journeymen are able to refine their craft by sharing their skills with apprentices while still picking up new skills from their masters.</li>
<li>Masters are challenged to get better by working with lower-level laborers who are hungry to get better at their craft.</li>
</ul>


<p>This resonated heavily with me, mainly because I was able to work with real-life masters while I was getting started in programming. They were able to keep me from doing stupid things by showing me the right way first, and giving me the opportunity to learn why that was the right way through conversation and examples.</p>

<p>I'm not finished with the book yet, but I like where it's headed, and the agile/pair-programming fan in me hopes that the authors will spend some time talking about the effect that pairing in particular can have in this type of setup.</p>
]]></content>
  </entry>
  
</feed>
